
Процедура ОправлятьДанныеОбОтсутствииАдресаПочтыКонтрагентаПриИзменении(Элемент)
	
ЭлементыФормы.АдресОтправкиСообщенийОбОтсутствииАдресаПочтыКонтрагента.Доступность = ЭтотОбъект.ОправлятьДанныеОбОтсутствииАдресаПочтыКонтрагента;
		
КонецПроцедуры

Процедура ПриОткрытии()
	
 ОправлятьДанныеОбОтсутствииАдресаПочтыКонтрагентаПриИзменении(Неопределено);
 	
КонецПроцедуры

Процедура ОсновныеДействияФормыРассчитатьИОтправить(Кнопка)
	
	Отказ = ПроверитьНаОтборПоКонтрагентам ();
	
	Если Отказ Тогда
	Возврат;
	КонецЕсли;
	
	РассчитатьЗадолженность();
	ОтправитьПисьма();
	
	
КонецПроцедуры

Процедура РассчитатьЗадолженность()

	Задолженность.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150)) КАК АдресЭлектроннойПочты,
		|	ВложенныйЗапрос.СуммаВзаиморасчетовОстаток КАК СуммаЗадолженности
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапрос.Контрагент КАК Контрагент,
		|		ВложенныйЗапрос.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВзаиморасчетыСКонтрагентамиОстатки.Контрагент КАК Контрагент,
		|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|			ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток
		|		ИЗ
		|			РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки КАК ВзаиморасчетыСКонтрагентамиОстатки
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
		|			ВзаиморасчетыСКонтрагентамиОстатки.Контрагент,
		|			ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК ВложенныйЗапрос
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапрос.Контрагент,
		|		ВложенныйЗапрос.СуммаВзаиморасчетовОстаток) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И ВложенныйЗапрос.Контрагент = КонтактнаяИнформация.Объект
		|ГДЕ
		|	ВложенныйЗапрос.Контрагент В ИЕРАРХИИ(&ГруппаКонтрагента)
		|	И ВложенныйЗапрос.СуммаВзаиморасчетовОстаток >= &МинимальнаяСуммаЗадолженности
		|ИТОГИ
		|	СУММА(СуммаЗадолженности)
		|ПО
		|	Контрагент,
		|	АдресЭлектроннойПочты";

	Запрос.УстановитьПараметр("ГруппаКонтрагента", ГруппаКонтрагентов);
	Запрос.УстановитьПараметр("МинимальнаяСуммаЗадолженности", МинимальнаяСумма);

	Результат = Запрос.Выполнить();

	ВыборкаКонтрагент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКонтрагент.Следующий() Цикл
		
	ВыборкаАдрес = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаАдрес.Следующий();
		
	НоваяСтрока = Задолженность.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаАдрес);
		
	НоваяСтрока.ОтправитьПисьмо = ЗначениеЗаполнено (НоваяСтрока.АдресЭлектроннойПочты);
		
	КонецЦикла;
   	
    СформироватьДокументыЗадолженности();
	
КонецПроцедуры

Процедура СформироватьДокументыЗадолженности()

	ДокументыЗадолженности.Очистить();
	
	ПараметрыОтбора = новый Структура();
	ПараметрыОтбора.Вставить("ОтправитьПисьмо", Истина);

	ТЗ = Задолженность.Выгрузить(ПараметрыОтбора, "Контрагент");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыСКонтрагентамиОбороты.Контрагент КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор КАК ДокументРасчетов,
		|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.Дата КАК РегистраторДата,
		|	ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.ДатаОплаты КАК ДатаОплаты,
		|	ВзаиморасчетыСКонтрагентамиОбороты.СуммаУпрПриход КАК СуммаЗадолженности
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Обороты(, , Регистратор, ) КАК ВзаиморасчетыСКонтрагентамиОбороты
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОбороты.Контрагент В(&СписокКонтрагентов)
		|	И НЕ ВзаиморасчетыСКонтрагентамиОбороты.Регистратор.Номер ПОДОБНО ""%ЧД%""
		|	И ВзаиморасчетыСКонтрагентамиОбороты.СуммаВзаиморасчетовПриход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистраторДата УБЫВ
		|ИТОГИ ПО
		|	Контрагент";

	Запрос.УстановитьПараметр("СписокКонтрагентов", ТЗ);

	Результат = Запрос.Выполнить();
	
	ВыборкаКонтрагенты = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		
	СтрокаЗадолженность = Задолженность.Найти(ВыборкаКонтрагенты.Контрагент, "Контрагент");
	
	ЗадолженностьКонтрагента = СтрокаЗадолженность.СуммаЗадолженности;
		
	ВыборкаДетальныеЗаписи = ВыборкаКонтрагенты.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
	Если не ЗначениеЗаполнено (ВыборкаДетальныеЗаписи.ДатаОплаты) или ВыборкаДетальныеЗаписи.ДатаОплаты < НачалоДня(ТекущаяДата()) Тогда
			
	НоваяСтрока = ДокументыЗадолженности.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
	НоваяСтрока.СуммаПросроченнойЗадолженности = 
	? (НоваяСтрока.СуммаЗадолженности> ЗадолженностьКонтрагента, ЗадолженностьКонтрагента, НоваяСтрока.СуммаЗадолженности);
	СтрокаЗадолженность.СуммаПросроченнойЗадолженности = СтрокаЗадолженность.СуммаПросроченнойЗадолженности + НоваяСтрока.СуммаПросроченнойЗадолженности;
	
	КонецЕсли;

	ЗадолженностьКонтрагента = ЗадолженностьКонтрагента - ВыборкаДетальныеЗаписи.СуммаЗадолженности;
	
	Если ЗадолженностьКонтрагента <=0 Тогда
		Прервать;
	КонецЕсли;
	
	
	КонецЦикла;
    КонецЦикла;
	
	Если ТолькоПросроченнаяЗадолженность Тогда
		
	ТЗ = Задолженность.ВыгрузитьКолонки();
	
	Для каждого СтрокаТЧ Из Задолженность Цикл
	
		Если СтрокаТЧ.СуммаПросроченнойЗадолженности >0 Тогда
			
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			
		КонецЕсли;
		
	
	КонецЦикла;
	
	Задолженность.Загрузить(ТЗ);			
		
		
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ОтправитьПисьма()

	Если Задолженность.Количество()=0 Тогда 
		Сообщить ("Список задолженностей не заполнен!");
		Возврат;
	КонецЕсли;
	
	
	Для каждого СтрокаТЧ Из Задолженность Цикл
	
		Если СтрокаТЧ.ОтправитьПисьмо Тогда 
			
		Если ЗначениеЗаполнено(СтрокаТЧ.АдресЭлектроннойПочты) 
			и EmailValid(СтрокаТЧ.АдресЭлектроннойПочты) Тогда
			
		ТекстПисьма = ПолучитьТекстПисьма (СтрокаТЧ);
		//Сообщить (ТекстПисьма);
		ОтправитьПисьмо(ТекстПисьма, СтрокаТЧ.АдресЭлектроннойПочты);
		иначеЕсли ОправлятьДанныеОбОтсутствииАдресаПочтыКонтрагента и EmailValid(АдресОтправкиСообщенийОбОтсутствииАдресаПочтыКонтрагента) Тогда
			
		ТекстПисьма = "Не заполнен адрес электронной почты контрагента " + СтрокаТЧ.Контрагент; 
		ОтправитьПисьмо(ТекстПисьма, АдресОтправкиСообщенийОбОтсутствииАдресаПочтыКонтрагента);
		
		КонецЕсли;
		
	КонецЕсли;
	
	КонецЦикла;


КонецПроцедуры

Функция ПолучитьТекстПисьма (СтрокаТЧ)
	
	Организация = СокрЛП(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация").НаименованиеПлательщикаПриПеречисленииНалогов);
	ФормСтрока = "Л = ru_RU; ДП = ЛОЖЬ";
	ПарПредмета="рубль,рубля,рублей";
	
    
	ТекстУведомления="У В Е Д О М Л Е Н И Е"+Символы.ПС;
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	ТекстУведомления=ТекстУведомления+"Уважаемый клиент! Настоящим уведомляем Вас, что по состоянию на "+Лев(ТекущаяДата(),10)+" общая сумма Вашей задолженности перед 
	|"+Организация+ " составляет "+СтрокаТЧ.СуммаЗадолженности+" руб. ("+ЧислоПрописью(СтрокаТЧ.СуммаЗадолженности, ФормСтрока, ПарПредмета)+" коп.),  
	|из которой "+СтрокаТЧ.СуммаПросроченнойЗадолженности+" руб. ("+ЧислоПрописью(СтрокаТЧ.СуммаПросроченнойЗадолженности, ФормСтрока, ПарПредмета)+" коп.) просрочено. 
	|Документы, по которым существует просроченная задолженность: "+Символы.ПС;
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	
	ПараметрыОтбора = новый Структура();
	ПараметрыОтбора.Вставить("Контрагент", СтрокаТЧ.Контрагент);
  
	СписокДокументов = ДокументыЗадолженности.НайтиСтроки(ПараметрыОтбора);
	
	Для каждого СтрокаДокументаЗадолженности Из СписокДокументов Цикл
	
	ТекстУведомления=ТекстУведомления+СтрокаДокументаЗадолженности.ДокументРасчетов+" на сумму "+Формат(СтрокаДокументаЗадолженности.СуммаПросроченнойЗадолженности,"ЧДЦ=2") + " руб."+Символы.ПС;	
	
	КонецЦикла;
	
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	ТекстУведомления=ТекстУведомления+"Просим Вас своевременно осуществлять оплату, в противном случае мы будем вынуждены пересмотреть предоставленную Вам сумму кредитного лимита вплоть до ее обнуления, а так же перевыставить на Вас издержки по уплате процентов за пользование кредитом сверх установленных договором сроков. "+Символы.ПС;
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	ТекстУведомления=ТекстУведомления+Символы.ПС;
	ТекстУведомления=ТекстУведомления+"Данное уведомление подготовлено в автоматическом режиме. По всем вопросам просьба связываться с курирующим Вашу 
	|компанию менеджером по телефону (347) 264-25-99"+Символы.ПС;
	
	Возврат ТекстУведомления;
	
КонецФункции

Процедура ОтправитьПисьмо(ТекстСообщения,Адрес)
			
	Учетка = Справочники.УчетныеЗаписиЭлектроннойПочты.НайтиПоНаименованию("Рассылка");
	Профиль = УправлениеЭлектроннойПочтой.ПолучитьИнтернетПочтовыйПрофиль(Учетка);
	
	Почта=Новый ИнтернетПочта;
	Письмо=Новый ИнтернетПочтовоеСообщение;
	Письмо.Получатели.Добавить(Адрес);
	Письмо.ИмяОтправителя=Профиль.Пользователь; 
	Письмо.Отправитель=Профиль.Пользователь; 
	Письмо.Кодировка="windows-1251"; 
	Письмо.Тема="УВЕДОМЛЕНИЕ";
	Письмо.Тексты.Добавить(ТекстСообщения);
	Попытка
	
	Почта.Подключиться(Профиль);
	Почта.Послать(Письмо);
	Почта.Отключиться();
	
	Статус = "Письмо отправлено по адресу "+Адрес;
	
	Исключение
		
	Инфо = ОписаниеОшибки();
	Статус = "Ошибка отправки по адресу "+Адрес+". "+Инфо;

	
	КонецПопытки;
	
	Сообщить (Статус);
	
КонецПроцедуры

Функция ПроверитьНаОтборПоКонтрагентам()

	Если ЗначениеЗаполнено(ГруппаКонтрагентов) Тогда
		Возврат Ложь;
	Иначе
		Ответ = Вопрос ("Не выбрана группа рассылки. Выбрать всех контрагентов?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	

КонецФункции // ПроверитьНаОтборПоКонтрагентам()

Процедура ОсновныеДействияФормыРассчитатьЗадолженность(Кнопка)
	
	РассчитатьЗадолженность();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОтправитьПисьма(Кнопка)
	
	ОтправитьПисьма();
	
КонецПроцедуры

Процедура КоманднаяПанель1УстановитьФлажки(Кнопка)
	
	Для каждого Строка Из Задолженность Цикл
	
	Строка.ОтправитьПисьмо = ЗначениеЗаполнено(Строка.АдресЭлектроннойПочты); 
	
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанель1СнятьФлажки(Кнопка)
	
	Для каждого Строка Из Задолженность Цикл
	
	Строка.ОтправитьПисьмо = Ложь; 
	
	КонецЦикла;
	
	
КонецПроцедуры

Функция EmailValid(Адрес) Экспорт

    //Адрес = "test@me@gmail.narod.am";

    ЛатинскиеБуквы = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

    Цифры = "0123456789";

    //ищем крайний справа символ @ для правильного выделения локальной и доменной части

    ИндексСобаки = Найти(Адрес,"@");

    //1. строка адреса вообще не содержит разделителя

    Если ИндексСобаки = 0 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    УрезаемаяСтрока = Сред(Адрес, ИндексСобаки+1);

    Пока Найти(УрезаемаяСтрока,"@") > 0 Цикл

        ИндексСобаки = ИндексСобаки + Найти(УрезаемаяСтрока,"@");

        УрезаемаяСтрока = Сред(УрезаемаяСтрока, ИндексСобаки+1);

    КонецЦикла;

    ДоменнаяЧасть = Сред(Адрес, ИндексСобаки+1);

    ЛокальнаяЧасть = Лев(Адрес, ИндексСобаки-1);

    //2. Проверяем длину локальной части

    Если СтрДлина(ЛокальнаяЧасть) < 1 ИЛИ СтрДлина(ЛокальнаяЧасть) > 64 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //3. Проверяем длину доменной части

    Если СтрДлина(ДоменнаяЧасть) < 1 ИЛИ СтрДлина(ДоменнаяЧасть) > 255 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //4. Проверяем что локальная части не начинается и не заканчивается на "."

    Если Лев(ЛокальнаяЧасть, 1) = "." ИЛИ Прав(ЛокальнаяЧасть, 1) = "." Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //5. Локальная части не содержит 2 или более "." подряд

    Если Найти(ЛокальнаяЧасть, "..") > 0 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //Проверка доменной части

    //6. Доменная часть не начинается с точки

    Если Лев(ДоменнаяЧасть, 1) = "." Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //7. Доменная часть не содержит 2 или более "." подряд

    Если Найти(ДоменнаяЧасть, "..") > 0 Тогда

        Возврат ЛОЖЬ;

    КонецЕсли;

    //8. Проверка частей доменной части

    //каждая часть начинается с буквы и заканчивается буквой или цифрой

    //каждая часть длиной не более 63 символов

    ИдентификаторыДоменнойЧасти = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДоменнаяЧасть, ".");

    Для Каждого ИдентификаторДомена ИЗ ИдентификаторыДоменнойЧасти Цикл

        Если СтрДлина(ИдентификаторДомена) > 63 Тогда

            Возврат ЛОЖЬ;

        КонецЕсли;

        Если Найти(ЛатинскиеБуквы, Лев(ИдентификаторДомена,1)) = 0

            //для доменов, нарушающих RFC 1035 п.2.3.1, например @1c.ru :)

            И Найти(Цифры, Лев(ИдентификаторДомена,1)) = 0

            Тогда

            Возврат ЛОЖЬ;

        КонецЕсли;

        Если Найти(ЛатинскиеБуквы, Прав(ИдентификаторДомена,1)) = 0 И Найти(Цифры, Прав(ИдентификаторДомена,1)) = 0 Тогда

            Возврат ЛОЖЬ;

        КонецЕсли;

    КонецЦикла;



    //Все проверки пройдены - радуемся

    Возврат ИСТИНА;

КонецФункции
