
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТЗСводная = Новый ТаблицаЗначений;
	
	Параметры = КомпоновщикНастроек.Настройки.ПараметрыДанных;
		
	ПараметрыОтбора = новый Структура();
	Период = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если Период.Использование Тогда
		
		ПараметрыОтбора.Вставить("Период", Период);
		
	КонецЕсли;

	ГруппаКонтрагентов = Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГруппаКонтрагентов"));
	
	Если ГруппаКонтрагентов.Использование Тогда
	
	ПараметрыОтбора.Вставить("ГруппаКонтрагентов", ГруппаКонтрагентов);
	
КонецЕсли;

    ПараметрыОтбора.Вставить("ДатаРасчетаПросрочки", ПолучитьДатуРасчетаПросрочки(Период));

	ТЗОстаткиПоДоговорамБезВеденияРасчетовПоДокументам = ПолучитьЗадолженностьПоДоговорам(ПараметрыОтбора);
	//ТЗОстаткиПоДоговорамСВедениемРасчетовПоДокументам = ПолучитьЗадолженностьПоДоговорам(ПараметрыОтбора,Истина);
	
	ТЗСводная = ТЗОстаткиПоДоговорамБезВеденияРасчетовПоДокументам;
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки(); 
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
	
	ВнешнийНаборДанных = Новый Структура("ДанныеВзаиморасчетов", ТЗСводная); 
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных; 
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешнийНаборДанных, ДанныеРасшифровки); 
	
	ДокументРезультат.Очистить();
	
 	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент; 
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
	
КонецПроцедуры

Функция ПолучитьЗадолженностьПоДоговорам(ПараметрыОтбора)
	
	Запрос = Новый Запрос;
	
	ГруппаКонтрагентов = ? (ПараметрыОтбора.Свойство ("ГруппаКонтрагентов"), ПараметрыОтбора.ГруппаКонтрагентов.Значение, Неопределено);
	ПоВсемГруппам = не ПараметрыОтбора.Свойство ("ГруппаКонтрагентов");
	НачалоПериода = ? (ПараметрыОтбора.Свойство ("Период"), ПараметрыОтбора.Период.Значение.ДатаНачала, Дата (1,1,1));
	КонецПериода = ? (ПараметрыОтбора.Свойство ("Период"), ПараметрыОтбора.Период.Значение.ДатаОкончания, Дата (1,1,1));
	
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Запрос.УстановитьПараметр("ГруппаКонтрагентов", ГруппаКонтрагентов);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ПоВсемГруппам", ПоВсемГруппам);

	
	//Запрос.УстановитьПараметр("ВестиПоДокументамРасчетовСКонтрагентом", ДоговораПоДокументамРасчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Организация,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Контрагент,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК Отсрочка,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрНачальныйОстаток КАК НачальныйОстаток,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК КонечныйОстаток,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрРасход КАК Отгружено,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрПриход КАК Оплачено,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Регистратор,
	|	0 КАК НеОплачено,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Регистратор.ДатаОплатыПоДокументу КАК ДатаОплатыПоДокументу,
	|	0 КАК ДнейПросрочки,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Регистратор.Дата,
	|	ЕСТЬNULL(ВложенныйЗапрос.СуммаУпрОстаток, 0) КАК СуммаЗаявокНаРасходование,
	|	0 КАК ПросроченнаяЗадолженность,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрНачальныйОстаток КАК НачальныйОстатокСтат,
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаУпрКонечныйОстаток КАК КонечныйОстатокСтат
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , ) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			СУММА(ЗаявкиНаРасходованиеСредствОстатки.СуммаУпрОстаток) КАК СуммаУпрОстаток
	|		ИЗ
	|			РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(&КонецПериода, ) КАК ЗаявкиНаРасходованиеСредствОстатки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента) КАК ВложенныйЗапрос
	|		ПО ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента = ВложенныйЗапрос.ДоговорКонтрагента
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПоВсемГруппам
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Контрагент В ИЕРАРХИИ (&ГруппаКонтрагентов)
	|		КОНЕЦ
	|	И ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.ВидДоговора = &ВидДоговора
	|	И ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.ДоговорКонтрагента.НеВыводитьВОтчетДебиторскойЗадолженности = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Регистратор.Дата
	|ИТОГИ
	|	СУММА(НачальныйОстаток),
	|	СУММА(КонечныйОстаток),
	|	СУММА(Отгружено),
	|	СУММА(Оплачено),
	|	МАКСИМУМ(СуммаЗаявокНаРасходование),
	|	СУММА(НачальныйОстатокСтат),
	|	СУММА(КонечныйОстатокСтат)
	|ПО
	|	ДоговорКонтрагента";
	
		
	Результат = Запрос.Выполнить();
	
	ТЗИтоги = Результат.Выгрузить();
	ТЗРезультат = ТЗИтоги.СкопироватьКолонки();
	ТЗДокументыПрошлыхПериодов = ТЗИтоги.СкопироватьКолонки();
	ДополнитьКолонкиТЗ (ТЗРезультат);
			
	// подбираем неоплаченные документы по FIFO 
		
	ВыборкаДоговор = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДоговор.Следующий() Цикл
		
	СуммаДолгаНаКонецПериода = ? (ВыборкаДоговор.КонечныйОстаток <0, -ВыборкаДоговор.КонечныйОстаток, 0);
	СуммаДолгаНаНачалоПериода = ? (ВыборкаДоговор.НачальныйОстаток <0, -ВыборкаДоговор.НачальныйОстаток, 0);
	СуммаОплачено = ВыборкаДоговор.Оплачено;
	СуммаОтгружено = ВыборкаДоговор.Отгружено;
	СуммаЗРС = ВыборкаДоговор.СуммаЗаявокНаРасходование;
	НачальныйОстатокСтат = ? (ВыборкаДоговор.НачальныйОстатокСтат <0, -ВыборкаДоговор.НачальныйОстатокСтат, 0);
	КонечныйОстатокСтат = ? (ВыборкаДоговор.КонечныйОстатокСтат <0, -ВыборкаДоговор.КонечныйОстатокСтат, 0);
	
	Если СуммаДолгаНаНачалоПериода > 0 Тогда   // Подбираем долги предыдущих периодов
		
	ВыборкаПредыдущиеПериоды = ПодобратьДокументыПоДоговору(ВыборкаДоговор.ДоговорКонтрагента, СуммаДолгаНаНачалоПериода, 20, НачалоПериода);
	
	Если не ВыборкаПредыдущиеПериоды = Неопределено Тогда
		
	Пока ВыборкаПредыдущиеПериоды.Следующий() Цикл
		
	Если СуммаДолгаНаНачалоПериода >0 Тогда
		
	Строка = ТЗДокументыПрошлыхПериодов.Добавить();     // набираем документы на сумму долга
	ЗаполнитьЗначенияСвойств(Строка, ВыборкаПредыдущиеПериоды);
	СуммаДолгаНаНачалоПериода = СуммаДолгаНаНачалоПериода - Строка.Отгружено;
Иначе
	ТЗДокументыПрошлыхПериодов.Сортировать("РегистраторДата"); 
	Прервать;
КонецЕсли;
КонецЦикла;

	СуммаДолгаНаНачалоПериода = ? (ВыборкаДоговор.НачальныйОстаток <0, -ВыборкаДоговор.НачальныйОстаток, 0);
	
	Для каждого СтрокаТЗ Из ТЗДокументыПрошлыхПериодов Цикл
		
	Если СуммаДолгаНаНачалоПериода >0 Тогда
			
	Строка = ТЗРезультат.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, СтрокаТЗ);
		Строка.НачальныйОстатокСтат = НачальныйОстатокСтат;
		Строка.КонечныйОстатокСтат = КонечныйОстатокСтат;
		Строка.НачальныйОстаток = ? (СуммаДолгаНаНачалоПериода >Строка.Отгружено, Строка.Отгружено, СуммаДолгаНаНачалоПериода);
		СуммаДолгаНаНачалоПериода = СуммаДолгаНаНачалоПериода - Строка.НачальныйОстаток;
		
		 Если СуммаОплачено > 0 Тогда
			
		Строка.Оплачено = ? (СуммаОплачено >Строка.НачальныйОстаток, Строка.НачальныйОстаток, СуммаОплачено);
		СуммаОплачено = СуммаОплачено - Строка.Оплачено;
		иначе
		Строка.Оплачено=0;
		КонецЕсли;

		Строка.НеОплачено = Строка.НачальныйОстаток-Строка.Оплачено;
		Строка.Отгружено =0;
		Строка.КонечныйОстаток = Строка.НеОплачено;
		Строка.СуммаЗаявокНаРасходование =0;


		Если Строка.НеОплачено > 0 Тогда
			
			Если ЗначениеЗаполнено (Строка.ДатаОплатыПоДокументу) и Строка.ДатаОплатыПоДокументу < ПараметрыОтбора.ДатаРасчетаПросрочки Тогда
				Строка.ДнейПросрочки = (НачалоДня(ПараметрыОтбора.ДатаРасчетаПросрочки)-НачалоДня(Строка.ДатаОплатыПоДокументу))/86400;
				Строка.ПросроченнаяЗадолженность = Строка.НеОплачено;
			КонецЕсли;
			
			Если СуммаЗРС > 0 Тогда
				
				Строка.СуммаЗаявокНаРасходование = ? (СуммаЗРС >Строка.НеОплачено, Строка.НеОплачено, СуммаЗРС);
				СуммаЗРС = СуммаЗРС - Строка.СуммаЗаявокНаРасходование;
            КонецЕсли;
		КонецЕсли;	
	Иначе
		Прервать;
			
	КонецЕсли;	
	
КонецЦикла;

	КонецЕсли;	

	КонецЕсли;

	СуммаДолгаТекущегоПериода = СуммаДолгаНаКонецПериода- СуммаДолгаНаНачалоПериода;
		
	ВыборкаДетальныеЗаписи = ВыборкаДоговор.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Регистратор) и ВыборкаДетальныеЗаписи.Оплачено = 0 Тогда
			
	Строка = ТЗРезультат.Добавить();
	
	ЗаполнитьЗначенияСвойств(Строка, ВыборкаДетальныеЗаписи);
	Строка.НачальныйОстаток = 0;
	
	Строка.НачальныйОстатокСтат = НачальныйОстатокСтат;
	Строка.КонечныйОстатокСтат = КонечныйОстатокСтат;


	Если СуммаДолгаТекущегоПериода >0 Тогда
			
	Строка.НеОплачено = ? (СуммаДолгаТекущегоПериода >Строка.Отгружено, Строка.Отгружено, СуммаДолгаТекущегоПериода);
	СуммаДолгаТекущегоПериода = СуммаДолгаТекущегоПериода - Строка.НеОплачено;
		
	КонецЕсли;
	
	Строка.Оплачено = Строка.Отгружено - Строка.НеОплачено;
	Строка.КонечныйОстаток = Строка.НеОплачено;
	Строка.СуммаЗаявокНаРасходование =0;
 
	Если Строка.НеОплачено > 0 Тогда
			
			Если ЗначениеЗаполнено (Строка.ДатаОплатыПоДокументу) и Строка.ДатаОплатыПоДокументу < ПараметрыОтбора.ДатаРасчетаПросрочки Тогда
				Строка.ДнейПросрочки = (НачалоДня(ПараметрыОтбора.ДатаРасчетаПросрочки)-НачалоДня(Строка.ДатаОплатыПоДокументу))/86400;
				Строка.ПросроченнаяЗадолженность = Строка.НеОплачено;
			КонецЕсли;
			
			Если СуммаЗРС > 0 Тогда
				
				Строка.СуммаЗаявокНаРасходование = ? (СуммаЗРС >Строка.НеОплачено, Строка.НеОплачено, СуммаЗРС);
				СуммаЗРС = СуммаЗРС - Строка.СуммаЗаявокНаРасходование;
             иначе
			   Строка.СуммаЗаявокНаРасходование =0;

			
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	КонецЦикла;
	
    ТЗДокументыПрошлыхПериодов.Очистить();
	
	КонецЦикла;	
	
		
    Возврат ТЗРезультат;
	
	
КонецФункции

Процедура ДополнитьКолонкиТЗ(ТЗРезультат)

	
КонецПроцедуры

Функция ПодобратьДокументыПоДоговору(ДоговорКонтрагента, СуммаЗадолженности, КоличествоДокументов, НачалоПериода)
	
	ПараметрПодстановки =? (КоличествоДокументов = 0, "", "ПЕРВЫЕ "+ КоличествоДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Закупки.ДоговорКонтрагента,
	|	Закупки.Организация,
	|	Закупки.Контрагент,
	|	СУММА(Закупки.Стоимость) КАК Отгружено,
	|	Закупки.Регистратор,
	|	Закупки.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности КАК Отсрочка,
	|	Закупки.Регистратор.ДатаОплатыПоДокументу КАК ДатаОплатыПоДокументу,
	|	Закупки.Регистратор.Дата
	|ИЗ
	|	РегистрНакопления.Закупки КАК Закупки
	|ГДЕ
	|	Закупки.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И Закупки.Период < &КонецПериода
	|	И Закупки.Стоимость > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Закупки.Организация,
	|	Закупки.Регистратор,
	|	Закупки.ДоговорКонтрагента,
	|	Закупки.Контрагент,
	|	Закупки.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности,
	|	Закупки.Регистратор.ДатаОплатыПоДокументу,
	|	Закупки.Регистратор.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Закупки.Регистратор.Дата УБЫВ
	|ИТОГИ
	|	СУММА(Отгружено)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("КонецПериода", НачалоПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
	ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаИтоги.Следующий() Тогда
		
	СуммаДокументов = ВыборкаИтоги.Отгружено;
	
	Если СуммаДокументов < СуммаЗадолженности и не КоличествоДокументов = 0 Тогда
		
	ВыборкаДетальныеЗаписи = ПодобратьДокументыПоДоговору(ДоговорКонтрагента, СуммаЗадолженности, 0, НачалоПериода);
	
	иначе	
	
	ВыборкаДетальныеЗаписи = ВыборкаИтоги.Выбрать();
	
	КонецЕсли;
	
	КонецЕсли;		
		
	КонецЕсли;

	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

Функция ПолучитьДатуРасчетаПросрочки(Период)

	Если не Период.Использование или Период.Значение.ДатаОкончания = Дата (1,1,1) 
		//или Период.Значение.ДатаОкончания > ТекущаяДата() 
		Тогда
		Возврат ТекущаяДата();
	Иначе
		Возврат Период.Значение.ДатаОкончания;
	КонецЕсли;
	

КонецФункции // ПолучитьДатуРасчетаПросрочки()

